package uk.co.conoregan.themoviedbapi.api;

import uk.co.conoregan.themoviedbapi.model.config.TokenAuthorisation;
import uk.co.conoregan.themoviedbapi.model.config.TokenSession;
import uk.co.conoregan.themoviedbapi.model.core.responses.ResponseStatusAuthentication;
import uk.co.conoregan.themoviedbapi.model.core.responses.ResponseStatusDelete;
import uk.co.conoregan.themoviedbapi.tools.ApiEndpoint;
import uk.co.conoregan.themoviedbapi.tools.MovieDbException;
import uk.co.conoregan.themoviedbapi.tools.TmdbException;

/**
 * The movie database api for authentication. See the
 * <a href="https://developer.themoviedb.org/reference/authentication-how-do-i-generate-a-session-id">documentation</a> for more info.
 */
public class TmdbAuthentication extends AbstractTmdbApi {
    private static final String TMDB_METHOD_AUTH = "authentication";

    private static final String PARAM_REQUEST_TOKEN = "request_token";

    /**
     * Create a new TmdbAuthentication instance to call the authentication related TMDb API methods.
     */
    TmdbAuthentication(TmdbApi tmdbApi) {
        super(tmdbApi);
    }

    /**
     * This method is used to generate a guest session id.
     *
     * A guest session can be used to rate movies without having a registered TMDb user account.
     *
     * You should only generate a single guest session per user (or device) as you will be able to attach the ratings to
     * a TMDb user account in the future.
     *
     * There are also IP limits in place so you should always make sure it's the end user doing the guest session
     * actions.
     *
     * If a guest session is not used for the first time within 24 hours, it will be automatically discarded.
     */
    public TokenSession getGuestString() throws TmdbException {
        ApiEndpoint apiEndpoint = new ApiEndpoint(TMDB_METHOD_AUTH, "guest_session/new");

        String responseBody = makeGetRequest(apiEndpoint);
        return mapJsonResult(responseBody, TokenSession.class);
    }

    /**
     * This method is used to generate a valid request token for user based authentication.
     *
     * A request token is required in order to request a session id.
     *
     * You can generate any number of request tokens but they will expire after 60 minutes.
     *
     * As soon as a valid session id has been created the token will be destroyed.
     */
    public TokenAuthorisation getAuthorisationToken() throws TmdbException {
        ApiEndpoint apiEndpoint = new ApiEndpoint(TMDB_METHOD_AUTH, "token/new");

        String responseBody = makeGetRequest(apiEndpoint);
        return mapJsonResult(responseBody, TokenAuthorisation.class);
    }

    /**
     * This method is used to generate a session id for user based authentication.
     *
     * A session id is required in order to use any of the write methods.
     */
    public TokenSession getString(TokenAuthorisation token) throws TmdbException {
        if (!token.getSuccess()) {
            throw new MovieDbException("Authorisation token was not successful!");
        }

        ApiEndpoint apiEndpoint = new ApiEndpoint(TMDB_METHOD_AUTH, "session/new");
        apiEndpoint.addPathParam(PARAM_REQUEST_TOKEN, token.getRequestToken());

        String responseBody = makeGetRequest(apiEndpoint);
        return mapJsonResult(responseBody, TokenSession.class);
    }

    /**
     * Try to validate TokenAuthorisation with username and password.
     *
     * @param token A TokenAuthorisation previously generated by getAuthorisationToken
     * @param user  username
     * @param pwd   password
     * @return The validated TokenAuthorisation. The same as input with getSuccess() == true
     * @deprecated use {@link #getString(TokenAuthorisation)} instead
     */
    @Deprecated
    public TokenAuthorisation getLoginToken(TokenAuthorisation token, String user, String pwd) throws TmdbException {
        ApiEndpoint apiEndpoint = new ApiEndpoint(TMDB_METHOD_AUTH, "token/validate_with_login");

        apiEndpoint.addPathParam(PARAM_REQUEST_TOKEN, token.getRequestToken());
        apiEndpoint.addPathParam("username", user);
        apiEndpoint.addPathParam("password", pwd);

        String responseBody = makeGetRequest(apiEndpoint);
        return mapJsonResult(responseBody, TokenAuthorisation.class);
    }

    /**
     * Does all the necessary username/password authentication stuff in one go.
     *
     * Generates a new valid TokenAuthorisation
     *
     * Validates the Token via username/password
     *
     * requests a new session id with the validated TokenAuthorisation
     * and returns a new TokenSession which one may want to transform
     * into String for APO calls that require a authorized user.
     *
     * @return validated TokenSession
     * @throws MovieDbException if the login failed
     * @deprecated use {@link #getString(TokenAuthorisation)} instead
     */
    @Deprecated
    public TokenSession getSessionLogin(String username, String password) throws TmdbException {
        TokenAuthorisation authToken = getAuthorisationToken();

        if (!authToken.getSuccess()) {
            throw new MovieDbException("Authorisation token was not successful!");
        }

        TokenAuthorisation loginToken = getLoginToken(authToken, username, password);

        if (!loginToken.getSuccess()) {
            throw new MovieDbException("User authentication failed:" + loginToken);
        }

        return getString(loginToken);
    }

    /**
     * Deletes a session.
     */
    public ResponseStatusDelete deleteSession(String sessionId) throws TmdbException {
        ApiEndpoint apiEndpoint = new ApiEndpoint(TMDB_METHOD_AUTH, "session");
        apiEndpoint.addPathParam("session_id", sessionId);

        String responseBody = makeGetRequest(apiEndpoint);
        return mapJsonResult(responseBody, ResponseStatusDelete.class);
    }

    /**
     * Validates a session and returns success or failure.
     */
    public ResponseStatusAuthentication validateToken() throws TmdbException {
        ApiEndpoint apiEndpoint = new ApiEndpoint(TMDB_METHOD_AUTH);

        String responseBody = makeGetRequest(apiEndpoint);
        return mapJsonResult(responseBody, ResponseStatusAuthentication.class);
    }
}
