plugins {
    id "java-library"
    id "application"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

//apply plugin: 'application'
//apply plugin: 'java'
//apply plugin: 'maven-publish'
//apply plugin: 'io.codearte.nexus-staging'

// not neeeded but does not work without
//mainClassName = "foo.Bar" // not needed but does not work without


repositories {
    mavenCentral()
//    mavenLocal()
}


dependencies {
    // logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:jcl-over-slf4j:2.0.9'
    testImplementation 'org.slf4j:slf4j-simple:2.0.9'

    // testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.6.0'

    // util
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'

    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'commons-codec:commons-codec:1.16.0'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

//javadoc.options.addStringOption('Xdoclint:none', '-quiet')


//http://stackoverflow.com/questions/34377367/why-is-gradle-install-replacing-my-version-with-unspecified
group 'com.github.holgerbrandl'
version '1.15'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            pom {
                name = "themoviedbapi"
                description = 'A java-wrapper around the JSON API provided by TMdB, which is an open database for movie and film content.'
                url = 'https://github.com/holgerbrandl/themoviedbapi'

                licenses {
                    license {
                        name = 'BSD'
                        url = 'https://github.com/holgerbrandl/themoviedbapi/blob/master/LICENCE.txt'
                    }
                }


                scm {
                    connection = 'scm:git:github.com/holgerbrandl/themoviedbapi.git'
                    url = 'https://github.com/holgerbrandl/themoviedbapi.git'
                }


                developers {
                    developer {
                        id = 'holgerbrandl'
                        name = 'Holger Brandl'
                        email = 'holgerbrandl@gmail.com'
                    }
                }
//
//                withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//
//                    project.configurations.implementation.allDependencies.each {
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                    }
//                }
            }
        }
    }
}


if (project.hasProperty('ossrhUsername')) nexusPublishing {
    repositories {
        sonatype {
//            nexusUrl = uri("https://your-server.com/staging")
            snapshotRepositoryUrl = uri(project.properties["sonatypeStagingProfileId"])
            username = project.properties["ossrhUsername"]
            password = project.properties["ossrhPassword"]
        }
    }
}

if (project.hasProperty('signing.keyId')) signing {
    sign publishing.publications.mavenJava
}


javadoc.options.addStringOption('Xdoclint:none', '-quiet')
